PREPROCESSOR[headers.c:1:1] data = #pragma once
PREPROCESSOR[headers.c:3:1] data = #include "token.h"
WORD[headers.c:5:1] data = struct
WORD[headers.c:5:8] data = Declaration
CHAR[headers.c:5:19] data = ;
WORD[headers.c:6:1] data = typedef
WORD[headers.c:6:9] data = struct
WORD[headers.c:6:16] data = Struct
CHAR[headers.c:6:23] data = {
WORD[headers.c:7:3] data = Token
CHAR[headers.c:7:8] data = *
WORD[headers.c:7:10] data = tokens
CHAR[headers.c:7:16] data = ;
WORD[headers.c:8:3] data = char
CHAR[headers.c:8:7] data = *
WORD[headers.c:8:9] data = name
CHAR[headers.c:8:13] data = ;
WORD[headers.c:9:3] data = struct
WORD[headers.c:9:10] data = Declaration
CHAR[headers.c:9:21] data = *
WORD[headers.c:9:23] data = members
CHAR[headers.c:9:30] data = ;
CHAR[headers.c:10:1] data = }
WORD[headers.c:10:3] data = Struct
CHAR[headers.c:10:9] data = ;
WORD[headers.c:12:1] data = typedef
WORD[headers.c:12:9] data = struct
WORD[headers.c:12:16] data = Declaration
CHAR[headers.c:12:28] data = {
WORD[headers.c:13:3] data = Token
CHAR[headers.c:13:8] data = *
WORD[headers.c:13:10] data = tokens
CHAR[headers.c:13:16] data = ;
WORD[headers.c:14:3] data = char
CHAR[headers.c:14:7] data = *
WORD[headers.c:14:9] data = name
CHAR[headers.c:14:13] data = ;
WORD[headers.c:15:3] data = Struct
CHAR[headers.c:15:9] data = *
WORD[headers.c:15:11] data = type
CHAR[headers.c:15:15] data = ;
CHAR[headers.c:16:1] data = }
WORD[headers.c:16:3] data = Declaration
CHAR[headers.c:16:14] data = ;
WORD[headers.c:18:1] data = void
WORD[headers.c:18:6] data = declaration_print_struct
CHAR[headers.c:18:30] data = (
WORD[headers.c:18:31] data = Struct
CHAR[headers.c:18:37] data = *
WORD[headers.c:18:39] data = s
CHAR[headers.c:18:40] data = ,
WORD[headers.c:18:42] data = int
WORD[headers.c:18:46] data = rec_lvl
CHAR[headers.c:18:53] data = )
CHAR[headers.c:18:54] data = ;
WORD[headers.c:19:1] data = void
WORD[headers.c:19:6] data = declaration_print_debug
CHAR[headers.c:19:29] data = (
WORD[headers.c:19:30] data = Declaration
CHAR[headers.c:19:41] data = *
WORD[headers.c:19:43] data = d
CHAR[headers.c:19:44] data = ,
WORD[headers.c:19:46] data = int
WORD[headers.c:19:50] data = rec_lvl
CHAR[headers.c:19:57] data = )
CHAR[headers.c:19:58] data = ;
WORD[headers.c:20:1] data = void
WORD[headers.c:20:6] data = declaration_delete_struct
CHAR[headers.c:20:31] data = (
WORD[headers.c:20:32] data = Struct
CHAR[headers.c:20:38] data = *
WORD[headers.c:20:40] data = s
CHAR[headers.c:20:41] data = )
CHAR[headers.c:20:42] data = ;
WORD[headers.c:21:1] data = void
WORD[headers.c:21:6] data = declaration_delete
CHAR[headers.c:21:24] data = (
WORD[headers.c:21:25] data = Declaration
CHAR[headers.c:21:36] data = *
WORD[headers.c:21:38] data = d
CHAR[headers.c:21:39] data = )
CHAR[headers.c:21:40] data = ;
PREPROCESSOR[headers.c:22:1] data = #pragma once
PREPROCESSOR[headers.c:24:1] data = #include <stdbool.h>
PREPROCESSOR[headers.c:25:1] data = #include <stddef.h>
PREPROCESSOR[headers.c:26:1] data = #include <stdio.h>
PREPROCESSOR[headers.c:28:1] data = #include "token.h"
PREPROCESSOR[headers.c:30:1] data = #define da_append(da, item)                                                     do {                                                                            if((da)->length >= (da)->capacity) {                                            size_t new_capacity = (da)->capacity * 2;                                     if(new_capacity == 0) new_capacity = 16;                                      (da)->data = realloc((da)->data, new_capacity * sizeof((da)->data[0]));       (da)->capacity = new_capacity;                                              }                                                                             (da)->data[(da)->length++] = (item);                                        } while(0)
WORD[headers.c:41:1] data = typedef
WORD[headers.c:41:9] data = struct
WORD[headers.c:41:16] data = Lexer
CHAR[headers.c:41:22] data = {
WORD[headers.c:42:3] data = char
WORD[headers.c:42:8] data = peeked_char
CHAR[headers.c:42:19] data = ;
WORD[headers.c:43:3] data = bool
WORD[headers.c:43:8] data = exhausted
CHAR[headers.c:43:17] data = ;
WORD[headers.c:44:3] data = bool
WORD[headers.c:44:8] data = is_newline
CHAR[headers.c:44:18] data = ;
WORD[headers.c:45:3] data = Loc
WORD[headers.c:45:7] data = current_location
CHAR[headers.c:45:23] data = ;
WORD[headers.c:47:3] data = FILE
CHAR[headers.c:47:7] data = *
WORD[headers.c:47:9] data = file
CHAR[headers.c:47:13] data = ;
WORD[headers.c:48:3] data = const
WORD[headers.c:48:9] data = char
CHAR[headers.c:48:13] data = *
WORD[headers.c:48:15] data = memory
CHAR[headers.c:48:21] data = ;
WORD[headers.c:49:3] data = size_t
WORD[headers.c:49:10] data = memory_length
CHAR[headers.c:49:23] data = ;
WORD[headers.c:51:3] data = Token
WORD[headers.c:51:9] data = peeked_token
CHAR[headers.c:51:21] data = ;
WORD[headers.c:53:3] data = struct
CHAR[headers.c:53:10] data = {
WORD[headers.c:54:5] data = char
CHAR[headers.c:54:9] data = *
CHAR[headers.c:54:10] data = *
WORD[headers.c:54:12] data = data
CHAR[headers.c:54:16] data = ;
WORD[headers.c:55:5] data = size_t
WORD[headers.c:55:12] data = length
CHAR[headers.c:55:18] data = ;
WORD[headers.c:56:5] data = size_t
WORD[headers.c:56:12] data = capacity
CHAR[headers.c:56:20] data = ;
CHAR[headers.c:57:3] data = }
WORD[headers.c:57:5] data = allocated_strings
CHAR[headers.c:57:22] data = ;
CHAR[headers.c:58:1] data = }
WORD[headers.c:58:3] data = Lexer
CHAR[headers.c:58:8] data = ;
WORD[headers.c:60:1] data = void
WORD[headers.c:60:6] data = lexer_parse_escape_sequence
CHAR[headers.c:60:33] data = (
WORD[headers.c:60:34] data = Lexer
CHAR[headers.c:60:39] data = *
WORD[headers.c:60:41] data = l
CHAR[headers.c:60:42] data = ,
WORD[headers.c:60:44] data = Token
CHAR[headers.c:60:49] data = *
WORD[headers.c:60:51] data = res
CHAR[headers.c:60:54] data = )
CHAR[headers.c:60:55] data = ;
WORD[headers.c:61:1] data = void
WORD[headers.c:61:6] data = lexer_lex_string
CHAR[headers.c:61:22] data = (
WORD[headers.c:61:23] data = Lexer
CHAR[headers.c:61:28] data = *
WORD[headers.c:61:30] data = l
CHAR[headers.c:61:31] data = ,
WORD[headers.c:61:33] data = Token
CHAR[headers.c:61:38] data = *
WORD[headers.c:61:40] data = res
CHAR[headers.c:61:43] data = ,
WORD[headers.c:61:45] data = char
WORD[headers.c:61:50] data = end
CHAR[headers.c:61:53] data = )
CHAR[headers.c:61:54] data = ;
WORD[headers.c:62:1] data = void
WORD[headers.c:62:6] data = lexer_lex_line
CHAR[headers.c:62:20] data = (
WORD[headers.c:62:21] data = Lexer
CHAR[headers.c:62:26] data = *
WORD[headers.c:62:28] data = l
CHAR[headers.c:62:29] data = ,
WORD[headers.c:62:31] data = Token
CHAR[headers.c:62:36] data = *
WORD[headers.c:62:38] data = res
CHAR[headers.c:62:41] data = )
CHAR[headers.c:62:42] data = ;
WORD[headers.c:63:1] data = void
WORD[headers.c:63:6] data = lexer_lex_comment
CHAR[headers.c:63:23] data = (
WORD[headers.c:63:24] data = Lexer
CHAR[headers.c:63:29] data = *
WORD[headers.c:63:31] data = l
CHAR[headers.c:63:32] data = ,
WORD[headers.c:63:34] data = Token
CHAR[headers.c:63:39] data = *
WORD[headers.c:63:41] data = res
CHAR[headers.c:63:44] data = )
CHAR[headers.c:63:45] data = ;
WORD[headers.c:65:1] data = void
WORD[headers.c:65:6] data = lexer_open_file
CHAR[headers.c:65:21] data = (
WORD[headers.c:65:22] data = Lexer
CHAR[headers.c:65:27] data = *
WORD[headers.c:65:29] data = l
CHAR[headers.c:65:30] data = ,
WORD[headers.c:65:32] data = const
WORD[headers.c:65:38] data = char
CHAR[headers.c:65:42] data = *
WORD[headers.c:65:44] data = filename
CHAR[headers.c:65:52] data = )
CHAR[headers.c:65:53] data = ;
WORD[headers.c:66:1] data = void
WORD[headers.c:66:6] data = lexer_open_memory
CHAR[headers.c:66:23] data = (
WORD[headers.c:66:24] data = Lexer
CHAR[headers.c:66:29] data = *
WORD[headers.c:66:31] data = l
CHAR[headers.c:66:32] data = ,
WORD[headers.c:66:34] data = const
WORD[headers.c:66:40] data = char
CHAR[headers.c:66:44] data = *
WORD[headers.c:66:46] data = text
CHAR[headers.c:66:50] data = ,
WORD[headers.c:66:52] data = size_t
WORD[headers.c:66:59] data = length
CHAR[headers.c:66:65] data = )
CHAR[headers.c:66:66] data = ;
WORD[headers.c:67:1] data = void
WORD[headers.c:67:6] data = lexer_delete
CHAR[headers.c:67:18] data = (
WORD[headers.c:67:19] data = Lexer
CHAR[headers.c:67:24] data = *
WORD[headers.c:67:26] data = l
CHAR[headers.c:67:27] data = )
CHAR[headers.c:67:28] data = ;
WORD[headers.c:69:1] data = char
WORD[headers.c:69:6] data = lexer_next_char
CHAR[headers.c:69:21] data = (
WORD[headers.c:69:22] data = Lexer
CHAR[headers.c:69:27] data = *
WORD[headers.c:69:29] data = l
CHAR[headers.c:69:30] data = )
CHAR[headers.c:69:31] data = ;
WORD[headers.c:70:1] data = char
WORD[headers.c:70:6] data = lexer_peek_char
CHAR[headers.c:70:21] data = (
WORD[headers.c:70:22] data = Lexer
CHAR[headers.c:70:27] data = *
WORD[headers.c:70:29] data = l
CHAR[headers.c:70:30] data = )
CHAR[headers.c:70:31] data = ;
WORD[headers.c:71:1] data = char
WORD[headers.c:71:6] data = lexer_drop_char
CHAR[headers.c:71:21] data = (
WORD[headers.c:71:22] data = Lexer
CHAR[headers.c:71:27] data = *
WORD[headers.c:71:29] data = l
CHAR[headers.c:71:30] data = )
CHAR[headers.c:71:31] data = ;
WORD[headers.c:73:1] data = Token
WORD[headers.c:73:7] data = lexer_next_token
CHAR[headers.c:73:23] data = (
WORD[headers.c:73:24] data = Lexer
CHAR[headers.c:73:29] data = *
WORD[headers.c:73:31] data = l
CHAR[headers.c:73:32] data = )
CHAR[headers.c:73:33] data = ;
WORD[headers.c:74:1] data = Token
WORD[headers.c:74:7] data = lexer_peek_token
CHAR[headers.c:74:23] data = (
WORD[headers.c:74:24] data = Lexer
CHAR[headers.c:74:29] data = *
WORD[headers.c:74:31] data = l
CHAR[headers.c:74:32] data = )
CHAR[headers.c:74:33] data = ;
WORD[headers.c:75:1] data = Token
WORD[headers.c:75:7] data = lexer_drop_token
CHAR[headers.c:75:23] data = (
WORD[headers.c:75:24] data = Lexer
CHAR[headers.c:75:29] data = *
WORD[headers.c:75:31] data = l
CHAR[headers.c:75:32] data = )
CHAR[headers.c:75:33] data = ;
PREPROCESSOR[headers.c:76:1] data = #pragma once
PREPROCESSOR[headers.c:78:1] data = #include "declaration.h"
PREPROCESSOR[headers.c:79:1] data = #include "lexer.h"
PREPROCESSOR[headers.c:80:1] data = #include "stb_ds.h"
WORD[headers.c:82:1] data = typedef
WORD[headers.c:82:9] data = struct
WORD[headers.c:82:16] data = NamedType
CHAR[headers.c:82:26] data = {
WORD[headers.c:83:3] data = char
CHAR[headers.c:83:7] data = *
WORD[headers.c:83:9] data = key
CHAR[headers.c:83:12] data = ;
WORD[headers.c:84:3] data = Struct
CHAR[headers.c:84:9] data = *
WORD[headers.c:84:11] data = value
CHAR[headers.c:84:16] data = ;
CHAR[headers.c:85:1] data = }
WORD[headers.c:85:3] data = NamedType
CHAR[headers.c:85:12] data = ;
WORD[headers.c:87:1] data = typedef
WORD[headers.c:87:9] data = struct
WORD[headers.c:87:16] data = Parser
CHAR[headers.c:87:23] data = {
WORD[headers.c:88:3] data = Lexer
WORD[headers.c:88:9] data = lexer
CHAR[headers.c:88:14] data = ;
WORD[headers.c:89:3] data = Declaration
CHAR[headers.c:89:14] data = *
WORD[headers.c:89:16] data = top_level
CHAR[headers.c:89:25] data = ;
WORD[headers.c:90:3] data = NamedType
CHAR[headers.c:90:12] data = *
WORD[headers.c:90:14] data = typedefs
CHAR[headers.c:90:22] data = ;
WORD[headers.c:91:3] data = NamedType
CHAR[headers.c:91:12] data = *
WORD[headers.c:91:14] data = structs
CHAR[headers.c:91:21] data = ;
CHAR[headers.c:92:1] data = }
WORD[headers.c:92:3] data = Parser
CHAR[headers.c:92:9] data = ;
WORD[headers.c:94:1] data = bool
WORD[headers.c:94:6] data = parser_parse_struct
CHAR[headers.c:94:25] data = (
WORD[headers.c:94:26] data = Parser
CHAR[headers.c:94:32] data = *
WORD[headers.c:94:34] data = p
CHAR[headers.c:94:35] data = ,
WORD[headers.c:94:37] data = Struct
CHAR[headers.c:94:43] data = *
WORD[headers.c:94:45] data = res
CHAR[headers.c:94:48] data = )
CHAR[headers.c:94:49] data = ;
WORD[headers.c:95:1] data = Declaration
WORD[headers.c:95:13] data = parser_parse_declaration
CHAR[headers.c:95:37] data = (
WORD[headers.c:95:38] data = Parser
CHAR[headers.c:95:44] data = *
WORD[headers.c:95:46] data = p
CHAR[headers.c:95:47] data = )
CHAR[headers.c:95:48] data = ;
WORD[headers.c:96:1] data = bool
WORD[headers.c:96:6] data = parser_parse_line
CHAR[headers.c:96:23] data = (
WORD[headers.c:96:24] data = Parser
CHAR[headers.c:96:30] data = *
WORD[headers.c:96:32] data = p
CHAR[headers.c:96:33] data = )
CHAR[headers.c:96:34] data = ;
WORD[headers.c:98:1] data = Token
WORD[headers.c:98:7] data = parser_peek_token
CHAR[headers.c:98:24] data = (
WORD[headers.c:98:25] data = Parser
CHAR[headers.c:98:31] data = *
WORD[headers.c:98:33] data = p
CHAR[headers.c:98:34] data = )
CHAR[headers.c:98:35] data = ;
WORD[headers.c:99:1] data = void
WORD[headers.c:99:6] data = parser_transfer_token
CHAR[headers.c:99:27] data = (
WORD[headers.c:99:28] data = Parser
CHAR[headers.c:99:34] data = *
WORD[headers.c:99:36] data = p
CHAR[headers.c:99:37] data = ,
WORD[headers.c:99:39] data = Token
CHAR[headers.c:99:44] data = *
CHAR[headers.c:99:45] data = *
WORD[headers.c:99:47] data = dest
CHAR[headers.c:99:51] data = )
CHAR[headers.c:99:52] data = ;
WORD[headers.c:101:1] data = void
WORD[headers.c:101:6] data = parser_delete
CHAR[headers.c:101:19] data = (
WORD[headers.c:101:20] data = Parser
CHAR[headers.c:101:26] data = *
WORD[headers.c:101:28] data = p
CHAR[headers.c:101:29] data = )
CHAR[headers.c:101:30] data = ;
PREPROCESSOR[headers.c:102:1] data = #pragma once
PREPROCESSOR[headers.c:104:1] data = #include <stdbool.h>
PREPROCESSOR[headers.c:105:1] data = #include <stddef.h>
WORD[headers.c:107:1] data = typedef
WORD[headers.c:107:9] data = enum
WORD[headers.c:107:14] data = LogLevel
CHAR[headers.c:107:23] data = {
WORD[headers.c:108:3] data = LOGLEVEL_ERROR
CHAR[headers.c:108:18] data = =
NUMBER[headers.c:108:20] data = 0
CHAR[headers.c:108:21] data = ,
WORD[headers.c:109:3] data = LOGLEVEL_WARNING
CHAR[headers.c:109:19] data = ,
WORD[headers.c:110:3] data = LOGLEVEL_INFO
CHAR[headers.c:110:16] data = ,
CHAR[headers.c:111:1] data = }
WORD[headers.c:111:3] data = LogLevel
CHAR[headers.c:111:11] data = ;
WORD[headers.c:113:1] data = typedef
WORD[headers.c:113:9] data = enum
WORD[headers.c:113:14] data = TokenKind
CHAR[headers.c:113:24] data = {
WORD[headers.c:114:3] data = TOKEN_EOF
CHAR[headers.c:114:13] data = =
NUMBER[headers.c:114:15] data = 0
CHAR[headers.c:114:16] data = ,
WORD[headers.c:115:3] data = TOKEN_INVALID
CHAR[headers.c:115:16] data = ,
WORD[headers.c:116:3] data = TOKEN_CHAR
CHAR[headers.c:116:13] data = ,
WORD[headers.c:117:3] data = TOKEN_WORD
CHAR[headers.c:117:13] data = ,
WORD[headers.c:118:3] data = TOKEN_LONGCOMMENT
CHAR[headers.c:118:20] data = ,
WORD[headers.c:119:3] data = TOKEN_SHORTCOMMENT
CHAR[headers.c:119:21] data = ,
WORD[headers.c:120:3] data = TOKEN_PREPROCESSOR
CHAR[headers.c:120:21] data = ,
WORD[headers.c:121:3] data = TOKEN_LONGSTRING
CHAR[headers.c:121:19] data = ,
WORD[headers.c:122:3] data = TOKEN_SHORTSTRING
CHAR[headers.c:122:20] data = ,
WORD[headers.c:123:3] data = TOKEN_NUMBER
CHAR[headers.c:123:15] data = ,
CHAR[headers.c:124:1] data = }
WORD[headers.c:124:3] data = TokenKind
CHAR[headers.c:124:12] data = ;
WORD[headers.c:126:1] data = typedef
WORD[headers.c:126:9] data = struct
WORD[headers.c:126:16] data = Loc
CHAR[headers.c:126:20] data = {
WORD[headers.c:127:3] data = const
WORD[headers.c:127:9] data = char
CHAR[headers.c:127:13] data = *
WORD[headers.c:127:15] data = filename
CHAR[headers.c:127:23] data = ;
WORD[headers.c:128:3] data = int
WORD[headers.c:128:7] data = line_num
CHAR[headers.c:128:15] data = ;
WORD[headers.c:129:3] data = int
WORD[headers.c:129:7] data = col_num
CHAR[headers.c:129:14] data = ;
WORD[headers.c:130:3] data = int
WORD[headers.c:130:7] data = byte_num
CHAR[headers.c:130:15] data = ;
CHAR[headers.c:131:1] data = }
WORD[headers.c:131:3] data = Loc
CHAR[headers.c:131:6] data = ;
WORD[headers.c:133:1] data = typedef
WORD[headers.c:133:9] data = struct
WORD[headers.c:133:16] data = Token
CHAR[headers.c:133:22] data = {
WORD[headers.c:134:3] data = char
CHAR[headers.c:134:7] data = *
WORD[headers.c:134:9] data = data
CHAR[headers.c:134:13] data = ;
WORD[headers.c:135:3] data = size_t
WORD[headers.c:135:10] data = length
CHAR[headers.c:135:16] data = ;
WORD[headers.c:136:3] data = size_t
WORD[headers.c:136:10] data = capacity
CHAR[headers.c:136:18] data = ;
WORD[headers.c:137:3] data = TokenKind
WORD[headers.c:137:13] data = kind
CHAR[headers.c:137:17] data = ;
WORD[headers.c:138:3] data = Loc
WORD[headers.c:138:7] data = location
CHAR[headers.c:138:15] data = ;
CHAR[headers.c:139:1] data = }
WORD[headers.c:139:3] data = Token
CHAR[headers.c:139:8] data = ;
WORD[headers.c:141:1] data = void
WORD[headers.c:141:6] data = token_print_debug
CHAR[headers.c:141:23] data = (
WORD[headers.c:141:24] data = Token
CHAR[headers.c:141:29] data = *
WORD[headers.c:141:31] data = tok
CHAR[headers.c:141:34] data = )
CHAR[headers.c:141:35] data = ;
WORD[headers.c:142:1] data = void
WORD[headers.c:142:6] data = token_print_error
CHAR[headers.c:142:23] data = (
WORD[headers.c:142:24] data = Token
CHAR[headers.c:142:29] data = *
WORD[headers.c:142:31] data = tok
CHAR[headers.c:142:34] data = ,
WORD[headers.c:142:36] data = LogLevel
WORD[headers.c:142:45] data = level
CHAR[headers.c:142:50] data = ,
WORD[headers.c:142:52] data = const
WORD[headers.c:142:58] data = char
CHAR[headers.c:142:62] data = *
WORD[headers.c:142:64] data = msg
CHAR[headers.c:142:67] data = ,
WORD[headers.c:142:69] data = const
WORD[headers.c:142:75] data = char
CHAR[headers.c:142:79] data = *
WORD[headers.c:142:81] data = printf_arg
CHAR[headers.c:142:91] data = )
CHAR[headers.c:142:92] data = ;
WORD[headers.c:143:1] data = bool
WORD[headers.c:143:6] data = token_eq_keyword
CHAR[headers.c:143:22] data = (
WORD[headers.c:143:23] data = Token
CHAR[headers.c:143:28] data = *
WORD[headers.c:143:30] data = tok
CHAR[headers.c:143:33] data = ,
WORD[headers.c:143:35] data = const
WORD[headers.c:143:41] data = char
CHAR[headers.c:143:45] data = *
WORD[headers.c:143:47] data = keyword
CHAR[headers.c:143:54] data = )
CHAR[headers.c:143:55] data = ;
WORD[headers.c:144:1] data = bool
WORD[headers.c:144:6] data = token_eq_char
CHAR[headers.c:144:19] data = (
WORD[headers.c:144:20] data = Token
CHAR[headers.c:144:25] data = *
WORD[headers.c:144:27] data = tok
CHAR[headers.c:144:30] data = ,
WORD[headers.c:144:32] data = char
WORD[headers.c:144:37] data = val
CHAR[headers.c:144:40] data = )
CHAR[headers.c:144:41] data = ;
