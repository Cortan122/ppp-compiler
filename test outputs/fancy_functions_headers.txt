Function(is_header = 1, prams = 0)
  Declaration(tokens = 11, name = declaration_print_struct)
    WORD[headers.c:18:1] data = void
    WORD[headers.c:18:6] data = declaration_print_struct
    CHAR[headers.c:18:30] data = (
    WORD[headers.c:18:31] data = Struct
    CHAR[headers.c:18:37] data = *
    WORD[headers.c:18:39] data = s
    CHAR[headers.c:18:40] data = ,
    WORD[headers.c:18:42] data = int
    WORD[headers.c:18:46] data = rec_lvl
    CHAR[headers.c:18:53] data = )
    CHAR[headers.c:18:54] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 11, name = declaration_print_debug)
    WORD[headers.c:19:1] data = void
    WORD[headers.c:19:6] data = declaration_print_debug
    CHAR[headers.c:19:29] data = (
    WORD[headers.c:19:30] data = Declaration
    CHAR[headers.c:19:41] data = *
    WORD[headers.c:19:43] data = d
    CHAR[headers.c:19:44] data = ,
    WORD[headers.c:19:46] data = int
    WORD[headers.c:19:50] data = rec_lvl
    CHAR[headers.c:19:57] data = )
    CHAR[headers.c:19:58] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 8, name = declaration_delete_struct)
    WORD[headers.c:20:1] data = void
    WORD[headers.c:20:6] data = declaration_delete_struct
    CHAR[headers.c:20:31] data = (
    WORD[headers.c:20:32] data = Struct
    CHAR[headers.c:20:38] data = *
    WORD[headers.c:20:40] data = s
    CHAR[headers.c:20:41] data = )
    CHAR[headers.c:20:42] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 8, name = declaration_delete)
    WORD[headers.c:21:1] data = void
    WORD[headers.c:21:6] data = declaration_delete
    CHAR[headers.c:21:24] data = (
    WORD[headers.c:21:25] data = Declaration
    CHAR[headers.c:21:36] data = *
    WORD[headers.c:21:38] data = d
    CHAR[headers.c:21:39] data = )
    CHAR[headers.c:21:40] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 12, name = lexer_parse_escape_sequence)
    WORD[headers.c:60:1] data = void
    WORD[headers.c:60:6] data = lexer_parse_escape_sequence
    CHAR[headers.c:60:33] data = (
    WORD[headers.c:60:34] data = Lexer
    CHAR[headers.c:60:39] data = *
    WORD[headers.c:60:41] data = l
    CHAR[headers.c:60:42] data = ,
    WORD[headers.c:60:44] data = Token
    CHAR[headers.c:60:49] data = *
    WORD[headers.c:60:51] data = res
    CHAR[headers.c:60:54] data = )
    CHAR[headers.c:60:55] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 15, name = lexer_lex_string)
    WORD[headers.c:61:1] data = void
    WORD[headers.c:61:6] data = lexer_lex_string
    CHAR[headers.c:61:22] data = (
    WORD[headers.c:61:23] data = Lexer
    CHAR[headers.c:61:28] data = *
    WORD[headers.c:61:30] data = l
    CHAR[headers.c:61:31] data = ,
    WORD[headers.c:61:33] data = Token
    CHAR[headers.c:61:38] data = *
    WORD[headers.c:61:40] data = res
    CHAR[headers.c:61:43] data = ,
    WORD[headers.c:61:45] data = char
    WORD[headers.c:61:50] data = end
    CHAR[headers.c:61:53] data = )
    CHAR[headers.c:61:54] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 12, name = lexer_lex_line)
    WORD[headers.c:62:1] data = void
    WORD[headers.c:62:6] data = lexer_lex_line
    CHAR[headers.c:62:20] data = (
    WORD[headers.c:62:21] data = Lexer
    CHAR[headers.c:62:26] data = *
    WORD[headers.c:62:28] data = l
    CHAR[headers.c:62:29] data = ,
    WORD[headers.c:62:31] data = Token
    CHAR[headers.c:62:36] data = *
    WORD[headers.c:62:38] data = res
    CHAR[headers.c:62:41] data = )
    CHAR[headers.c:62:42] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 12, name = lexer_lex_comment)
    WORD[headers.c:63:1] data = void
    WORD[headers.c:63:6] data = lexer_lex_comment
    CHAR[headers.c:63:23] data = (
    WORD[headers.c:63:24] data = Lexer
    CHAR[headers.c:63:29] data = *
    WORD[headers.c:63:31] data = l
    CHAR[headers.c:63:32] data = ,
    WORD[headers.c:63:34] data = Token
    CHAR[headers.c:63:39] data = *
    WORD[headers.c:63:41] data = res
    CHAR[headers.c:63:44] data = )
    CHAR[headers.c:63:45] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 13, name = lexer_open_file)
    WORD[headers.c:65:1] data = void
    WORD[headers.c:65:6] data = lexer_open_file
    CHAR[headers.c:65:21] data = (
    WORD[headers.c:65:22] data = Lexer
    CHAR[headers.c:65:27] data = *
    WORD[headers.c:65:29] data = l
    CHAR[headers.c:65:30] data = ,
    WORD[headers.c:65:32] data = const
    WORD[headers.c:65:38] data = char
    CHAR[headers.c:65:42] data = *
    WORD[headers.c:65:44] data = filename
    CHAR[headers.c:65:52] data = )
    CHAR[headers.c:65:53] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 16, name = lexer_open_memory)
    WORD[headers.c:66:1] data = void
    WORD[headers.c:66:6] data = lexer_open_memory
    CHAR[headers.c:66:23] data = (
    WORD[headers.c:66:24] data = Lexer
    CHAR[headers.c:66:29] data = *
    WORD[headers.c:66:31] data = l
    CHAR[headers.c:66:32] data = ,
    WORD[headers.c:66:34] data = const
    WORD[headers.c:66:40] data = char
    CHAR[headers.c:66:44] data = *
    WORD[headers.c:66:46] data = text
    CHAR[headers.c:66:50] data = ,
    WORD[headers.c:66:52] data = size_t
    WORD[headers.c:66:59] data = length
    CHAR[headers.c:66:65] data = )
    CHAR[headers.c:66:66] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 8, name = lexer_delete)
    WORD[headers.c:67:1] data = void
    WORD[headers.c:67:6] data = lexer_delete
    CHAR[headers.c:67:18] data = (
    WORD[headers.c:67:19] data = Lexer
    CHAR[headers.c:67:24] data = *
    WORD[headers.c:67:26] data = l
    CHAR[headers.c:67:27] data = )
    CHAR[headers.c:67:28] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 8, name = lexer_next_char)
    WORD[headers.c:69:1] data = char
    WORD[headers.c:69:6] data = lexer_next_char
    CHAR[headers.c:69:21] data = (
    WORD[headers.c:69:22] data = Lexer
    CHAR[headers.c:69:27] data = *
    WORD[headers.c:69:29] data = l
    CHAR[headers.c:69:30] data = )
    CHAR[headers.c:69:31] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 8, name = lexer_peek_char)
    WORD[headers.c:70:1] data = char
    WORD[headers.c:70:6] data = lexer_peek_char
    CHAR[headers.c:70:21] data = (
    WORD[headers.c:70:22] data = Lexer
    CHAR[headers.c:70:27] data = *
    WORD[headers.c:70:29] data = l
    CHAR[headers.c:70:30] data = )
    CHAR[headers.c:70:31] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 8, name = lexer_drop_char)
    WORD[headers.c:71:1] data = char
    WORD[headers.c:71:6] data = lexer_drop_char
    CHAR[headers.c:71:21] data = (
    WORD[headers.c:71:22] data = Lexer
    CHAR[headers.c:71:27] data = *
    WORD[headers.c:71:29] data = l
    CHAR[headers.c:71:30] data = )
    CHAR[headers.c:71:31] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 12, name = parser_parse_struct)
    WORD[headers.c:94:1] data = bool
    WORD[headers.c:94:6] data = parser_parse_struct
    CHAR[headers.c:94:25] data = (
    WORD[headers.c:94:26] data = Parser
    CHAR[headers.c:94:32] data = *
    WORD[headers.c:94:34] data = p
    CHAR[headers.c:94:35] data = ,
    WORD[headers.c:94:37] data = Struct
    CHAR[headers.c:94:43] data = *
    WORD[headers.c:94:45] data = res
    CHAR[headers.c:94:48] data = )
    CHAR[headers.c:94:49] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 8, name = parser_parse_declaration)
    WORD[headers.c:95:1] data = Declaration
    WORD[headers.c:95:13] data = parser_parse_declaration
    CHAR[headers.c:95:37] data = (
    WORD[headers.c:95:38] data = Parser
    CHAR[headers.c:95:44] data = *
    WORD[headers.c:95:46] data = p
    CHAR[headers.c:95:47] data = )
    CHAR[headers.c:95:48] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 8, name = parser_parse_line)
    WORD[headers.c:96:1] data = bool
    WORD[headers.c:96:6] data = parser_parse_line
    CHAR[headers.c:96:23] data = (
    WORD[headers.c:96:24] data = Parser
    CHAR[headers.c:96:30] data = *
    WORD[headers.c:96:32] data = p
    CHAR[headers.c:96:33] data = )
    CHAR[headers.c:96:34] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 13, name = parser_transfer_token)
    WORD[headers.c:99:1] data = void
    WORD[headers.c:99:6] data = parser_transfer_token
    CHAR[headers.c:99:27] data = (
    WORD[headers.c:99:28] data = Parser
    CHAR[headers.c:99:34] data = *
    WORD[headers.c:99:36] data = p
    CHAR[headers.c:99:37] data = ,
    WORD[headers.c:99:39] data = Token
    CHAR[headers.c:99:44] data = *
    CHAR[headers.c:99:45] data = *
    WORD[headers.c:99:47] data = dest
    CHAR[headers.c:99:51] data = )
    CHAR[headers.c:99:52] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 8, name = parser_delete)
    WORD[headers.c:101:1] data = void
    WORD[headers.c:101:6] data = parser_delete
    CHAR[headers.c:101:19] data = (
    WORD[headers.c:101:20] data = Parser
    CHAR[headers.c:101:26] data = *
    WORD[headers.c:101:28] data = p
    CHAR[headers.c:101:29] data = )
    CHAR[headers.c:101:30] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 8, name = token_print_debug)
    WORD[headers.c:141:1] data = void
    WORD[headers.c:141:6] data = token_print_debug
    CHAR[headers.c:141:23] data = (
    WORD[headers.c:141:24] data = Token
    CHAR[headers.c:141:29] data = *
    WORD[headers.c:141:31] data = tok
    CHAR[headers.c:141:34] data = )
    CHAR[headers.c:141:35] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 21, name = token_print_error)
    WORD[headers.c:142:1] data = void
    WORD[headers.c:142:6] data = token_print_error
    CHAR[headers.c:142:23] data = (
    WORD[headers.c:142:24] data = Token
    CHAR[headers.c:142:29] data = *
    WORD[headers.c:142:31] data = tok
    CHAR[headers.c:142:34] data = ,
    WORD[headers.c:142:36] data = LogLevel
    WORD[headers.c:142:45] data = level
    CHAR[headers.c:142:50] data = ,
    WORD[headers.c:142:52] data = const
    WORD[headers.c:142:58] data = char
    CHAR[headers.c:142:62] data = *
    WORD[headers.c:142:64] data = msg
    CHAR[headers.c:142:67] data = ,
    WORD[headers.c:142:69] data = const
    WORD[headers.c:142:75] data = char
    CHAR[headers.c:142:79] data = *
    WORD[headers.c:142:81] data = printf_arg
    CHAR[headers.c:142:91] data = )
    CHAR[headers.c:142:92] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 13, name = token_eq_keyword)
    WORD[headers.c:143:1] data = bool
    WORD[headers.c:143:6] data = token_eq_keyword
    CHAR[headers.c:143:22] data = (
    WORD[headers.c:143:23] data = Token
    CHAR[headers.c:143:28] data = *
    WORD[headers.c:143:30] data = tok
    CHAR[headers.c:143:33] data = ,
    WORD[headers.c:143:35] data = const
    WORD[headers.c:143:41] data = char
    CHAR[headers.c:143:45] data = *
    WORD[headers.c:143:47] data = keyword
    CHAR[headers.c:143:54] data = )
    CHAR[headers.c:143:55] data = ;

Function(is_header = 1, prams = 0)
  Declaration(tokens = 11, name = token_eq_char)
    WORD[headers.c:144:1] data = bool
    WORD[headers.c:144:6] data = token_eq_char
    CHAR[headers.c:144:19] data = (
    WORD[headers.c:144:20] data = Token
    CHAR[headers.c:144:25] data = *
    WORD[headers.c:144:27] data = tok
    CHAR[headers.c:144:30] data = ,
    WORD[headers.c:144:32] data = char
    WORD[headers.c:144:37] data = val
    CHAR[headers.c:144:40] data = )
    CHAR[headers.c:144:41] data = ;

