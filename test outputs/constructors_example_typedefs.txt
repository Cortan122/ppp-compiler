# 1 "test inputs/example_typedefs.c"
typedef struct Triangle {
  int a;
  int b;
  int c;
} Triangle;

typedef struct Rectangle {
  int x;
  int y;
} Rectangle;

typedef struct Circle {
  int r;
} Circle;

typedef struct Figure { int tag; struct {
  char* color;
} head; union {
  Triangle s00;
  Rectangle s01;
  Circle s02; } tail;
} Figure;
typedef
# 24 "test inputs/example_typedefs.c"
bool(*__ppp__pointer_Intersect_Figure_Figure)(Figure *first, Figure *second);__ppp__pointer_Intersect_Figure_Figure* __ppp__table_Intersect_Figure_Figure = (void*)0;int __ppp__table_count_Intersect_Figure_Figure = 0;
# 24 "test inputs/example_typedefs.c"
bool Intersect(Figure *first, Figure *second  ){return __ppp__table_Intersect_Figure_Figure[first->tag+second->tag*__ppp__tag_counter_Figure](first,second           );}

// Прямоугольник разместится внутри прямоугольника
struct __ppp__Figure_Rectangle{ int tag; struct {
# 17 "test inputs/example_typedefs.c"
char* color;
} head; 
# 27 "test inputs/example_typedefs.c"
Rectangle tail; };int __attribute__((weak)) __ppp__tag_value_Figure_Rectangle;
bool __ppp__Intersect_Figure_Rectangle_Figure_Rectangle(struct __ppp__Figure_Rectangle*r1, struct __ppp__Figure_Rectangle*r2  ) {
  return ((r1->tail. x< r2->tail. x) && (r1->tail. y< r2->tail. y)) ||
         ((r1->tail. x< r2->tail. y) && (r1->tail. y< r2->tail. x));
}
void __attribute__((weak, constructor(103))) _constructor__ppp__Intersect_Figure_Rectangle_Figure_Rectangle() {
  __ppp__table_Intersect_Figure_Figure[__ppp__tag_value_Figure_Rectangle+__ppp__tag_value_Figure_Rectangle*__ppp__tag_counter_Figure] = &__ppp__Intersect_Figure_Rectangle_Figure_Rectangle;
}

# 32 "test inputs/example_typedefs.c"
// Круг разместится внутри круга
struct __ppp__Figure_Circle{ int tag; struct {
# 17 "test inputs/example_typedefs.c"
char* color;
} head; 
# 33 "test inputs/example_typedefs.c"
Circle tail; };int __attribute__((weak)) __ppp__tag_value_Figure_Circle;
bool __ppp__Intersect_Figure_Circle_Figure_Circle(struct __ppp__Figure_Circle*c1, struct __ppp__Figure_Circle*c2  ) {
  return c1->tail. r< c2->tail. r;
}
void __attribute__((weak, constructor(103))) _constructor__ppp__Intersect_Figure_Circle_Figure_Circle() {
  __ppp__table_Intersect_Figure_Figure[__ppp__tag_value_Figure_Circle+__ppp__tag_value_Figure_Circle*__ppp__tag_counter_Figure] = &__ppp__Intersect_Figure_Circle_Figure_Circle;
}

void* calloc(unsigned long nmemb, unsigned long size);
int __attribute__((weak)) __ppp__tag_counter_Figure = 0;
void __attribute__((weak, constructor(101))) _constructor__ppp__tag_value_Figure_Rectangle() {
  __ppp__tag_value_Figure_Rectangle = __ppp__tag_counter_Figure++;
}

void __attribute__((weak, constructor(101))) _constructor__ppp__tag_value_Figure_Circle() {
  __ppp__tag_value_Figure_Circle = __ppp__tag_counter_Figure++;
}

void __attribute__((weak, constructor(102))) _constructor__ppp__table_Intersect_Figure_Figure() {
  int size = __ppp__tag_counter_Figure * __ppp__tag_counter_Figure;
  __ppp__table_Intersect_Figure_Figure = calloc(size, sizeof(void*));
}

