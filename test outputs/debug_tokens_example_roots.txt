PREPROCESSOR[example_roots.c:1:1] data = #include <stdio.h>
PREPROCESSOR[example_roots.c:2:1] data = #include <math.h>
WORD[example_roots.c:4:1] data = typedef
WORD[example_roots.c:4:9] data = struct
WORD[example_roots.c:4:16] data = OneRoot
CHAR[example_roots.c:4:24] data = {
WORD[example_roots.c:5:3] data = double
WORD[example_roots.c:5:10] data = x
CHAR[example_roots.c:5:11] data = ;
CHAR[example_roots.c:6:1] data = }
WORD[example_roots.c:6:3] data = OneRoot
CHAR[example_roots.c:6:10] data = ;
WORD[example_roots.c:8:1] data = typedef
WORD[example_roots.c:8:9] data = struct
WORD[example_roots.c:8:16] data = TwoRoots
CHAR[example_roots.c:8:25] data = {
WORD[example_roots.c:9:3] data = double
WORD[example_roots.c:9:10] data = x1
CHAR[example_roots.c:9:12] data = ;
WORD[example_roots.c:10:3] data = double
WORD[example_roots.c:10:10] data = x2
CHAR[example_roots.c:10:12] data = ;
CHAR[example_roots.c:11:1] data = }
WORD[example_roots.c:11:3] data = TwoRoots
CHAR[example_roots.c:11:11] data = ;
WORD[example_roots.c:13:1] data = typedef
WORD[example_roots.c:13:9] data = struct
WORD[example_roots.c:13:16] data = NoRoot
CHAR[example_roots.c:13:23] data = {
WORD[example_roots.c:14:3] data = char
CHAR[example_roots.c:14:7] data = *
WORD[example_roots.c:14:9] data = msg
CHAR[example_roots.c:14:12] data = ;
CHAR[example_roots.c:15:1] data = }
WORD[example_roots.c:15:3] data = NoRoot
CHAR[example_roots.c:15:9] data = ;
WORD[example_roots.c:17:1] data = typedef
WORD[example_roots.c:17:9] data = struct
WORD[example_roots.c:17:16] data = Root
CHAR[example_roots.c:17:21] data = {
CHAR[example_roots.c:17:22] data = }
CHAR[example_roots.c:17:24] data = <
WORD[example_roots.c:18:3] data = struct
WORD[example_roots.c:18:10] data = OneRoot
CHAR[example_roots.c:18:17] data = ;
WORD[example_roots.c:19:3] data = struct
WORD[example_roots.c:19:10] data = TwoRoots
CHAR[example_roots.c:19:18] data = ;
WORD[example_roots.c:20:3] data = struct
WORD[example_roots.c:20:10] data = NoRoot
CHAR[example_roots.c:20:16] data = ;
CHAR[example_roots.c:21:1] data = >
WORD[example_roots.c:21:3] data = Root
CHAR[example_roots.c:21:7] data = ;
WORD[example_roots.c:23:1] data = void
WORD[example_roots.c:23:6] data = Print
CHAR[example_roots.c:23:11] data = <
WORD[example_roots.c:23:12] data = Root
CHAR[example_roots.c:23:16] data = *
WORD[example_roots.c:23:18] data = root
CHAR[example_roots.c:23:22] data = >
CHAR[example_roots.c:23:23] data = (
CHAR[example_roots.c:23:24] data = )
CHAR[example_roots.c:23:26] data = =
NUMBER[example_roots.c:23:28] data = 0
CHAR[example_roots.c:23:29] data = ;
WORD[example_roots.c:25:1] data = void
WORD[example_roots.c:25:6] data = Print
CHAR[example_roots.c:25:11] data = <
WORD[example_roots.c:25:12] data = Root
CHAR[example_roots.c:25:16] data = <
WORD[example_roots.c:25:17] data = OneRoot
CHAR[example_roots.c:25:24] data = >
CHAR[example_roots.c:25:25] data = *
WORD[example_roots.c:25:27] data = root
CHAR[example_roots.c:25:31] data = >
CHAR[example_roots.c:25:32] data = (
CHAR[example_roots.c:25:33] data = )
CHAR[example_roots.c:25:35] data = {
WORD[example_roots.c:26:3] data = printf
CHAR[example_roots.c:26:9] data = (
LONGSTRING[example_roots.c:26:10] data = x = %.2f

CHAR[example_roots.c:26:22] data = ,
WORD[example_roots.c:26:24] data = root
CHAR[example_roots.c:26:28] data = -
CHAR[example_roots.c:26:29] data = >
CHAR[example_roots.c:26:30] data = !
WORD[example_roots.c:26:31] data = x
CHAR[example_roots.c:26:32] data = )
CHAR[example_roots.c:26:33] data = ;
CHAR[example_roots.c:27:1] data = }
WORD[example_roots.c:29:1] data = void
WORD[example_roots.c:29:6] data = Print
CHAR[example_roots.c:29:11] data = <
WORD[example_roots.c:29:12] data = Root
CHAR[example_roots.c:29:16] data = <
WORD[example_roots.c:29:17] data = TwoRoots
CHAR[example_roots.c:29:25] data = >
CHAR[example_roots.c:29:26] data = *
WORD[example_roots.c:29:28] data = root
CHAR[example_roots.c:29:32] data = >
CHAR[example_roots.c:29:33] data = (
CHAR[example_roots.c:29:34] data = )
CHAR[example_roots.c:29:36] data = {
WORD[example_roots.c:30:3] data = printf
CHAR[example_roots.c:30:9] data = (
LONGSTRING[example_roots.c:30:10] data = x1 = %.2f

CHAR[example_roots.c:30:23] data = ,
WORD[example_roots.c:30:25] data = root
CHAR[example_roots.c:30:29] data = -
CHAR[example_roots.c:30:30] data = >
CHAR[example_roots.c:30:31] data = !
WORD[example_roots.c:30:32] data = x1
CHAR[example_roots.c:30:34] data = )
CHAR[example_roots.c:30:35] data = ;
WORD[example_roots.c:31:3] data = printf
CHAR[example_roots.c:31:9] data = (
LONGSTRING[example_roots.c:31:10] data = x2 = %.2f

CHAR[example_roots.c:31:23] data = ,
WORD[example_roots.c:31:25] data = root
CHAR[example_roots.c:31:29] data = -
CHAR[example_roots.c:31:30] data = >
CHAR[example_roots.c:31:31] data = !
WORD[example_roots.c:31:32] data = x2
CHAR[example_roots.c:31:34] data = )
CHAR[example_roots.c:31:35] data = ;
CHAR[example_roots.c:32:1] data = }
WORD[example_roots.c:34:1] data = void
WORD[example_roots.c:34:6] data = Print
CHAR[example_roots.c:34:11] data = <
WORD[example_roots.c:34:12] data = Root
CHAR[example_roots.c:34:16] data = <
WORD[example_roots.c:34:17] data = NoRoot
CHAR[example_roots.c:34:23] data = >
CHAR[example_roots.c:34:24] data = *
WORD[example_roots.c:34:26] data = root
CHAR[example_roots.c:34:30] data = >
CHAR[example_roots.c:34:31] data = (
CHAR[example_roots.c:34:32] data = )
CHAR[example_roots.c:34:34] data = {
WORD[example_roots.c:35:3] data = printf
CHAR[example_roots.c:35:9] data = (
LONGSTRING[example_roots.c:35:10] data = error: %s

CHAR[example_roots.c:35:23] data = ,
WORD[example_roots.c:35:25] data = root
CHAR[example_roots.c:35:29] data = -
CHAR[example_roots.c:35:30] data = >
CHAR[example_roots.c:35:31] data = !
WORD[example_roots.c:35:32] data = msg
CHAR[example_roots.c:35:35] data = )
CHAR[example_roots.c:35:36] data = ;
CHAR[example_roots.c:36:1] data = }
WORD[example_roots.c:38:1] data = void
WORD[example_roots.c:38:6] data = EvalOneRoot
CHAR[example_roots.c:38:17] data = (
WORD[example_roots.c:38:18] data = double
WORD[example_roots.c:38:25] data = a
CHAR[example_roots.c:38:26] data = ,
WORD[example_roots.c:38:28] data = double
WORD[example_roots.c:38:35] data = b
CHAR[example_roots.c:38:36] data = ,
WORD[example_roots.c:38:38] data = Root
CHAR[example_roots.c:38:42] data = *
WORD[example_roots.c:38:44] data = root
CHAR[example_roots.c:38:48] data = )
CHAR[example_roots.c:38:50] data = {
WORD[example_roots.c:39:3] data = Root
CHAR[example_roots.c:39:7] data = <
WORD[example_roots.c:39:8] data = OneRoot
CHAR[example_roots.c:39:15] data = >
WORD[example_roots.c:39:17] data = res
CHAR[example_roots.c:39:20] data = ;
WORD[example_roots.c:40:3] data = res
CHAR[example_roots.c:40:6] data = !
WORD[example_roots.c:40:7] data = x
CHAR[example_roots.c:40:9] data = =
CHAR[example_roots.c:40:11] data = (
CHAR[example_roots.c:40:12] data = -
WORD[example_roots.c:40:13] data = b
CHAR[example_roots.c:40:14] data = )
CHAR[example_roots.c:40:16] data = /
CHAR[example_roots.c:40:18] data = (
NUMBER[example_roots.c:40:19] data = 2
CHAR[example_roots.c:40:21] data = *
WORD[example_roots.c:40:23] data = a
CHAR[example_roots.c:40:24] data = )
CHAR[example_roots.c:40:25] data = ;
WORD[example_roots.c:41:3] data = Root
CHAR[example_roots.c:41:7] data = *
WORD[example_roots.c:41:9] data = resptr
CHAR[example_roots.c:41:16] data = =
CHAR[example_roots.c:41:18] data = &
WORD[example_roots.c:41:19] data = res
CHAR[example_roots.c:41:22] data = ;
CHAR[example_roots.c:42:3] data = *
WORD[example_roots.c:42:4] data = root
CHAR[example_roots.c:42:9] data = =
CHAR[example_roots.c:42:11] data = *
WORD[example_roots.c:42:12] data = resptr
CHAR[example_roots.c:42:18] data = ;
CHAR[example_roots.c:43:1] data = }
WORD[example_roots.c:45:1] data = void
WORD[example_roots.c:45:6] data = EvalTwoRoots
CHAR[example_roots.c:45:18] data = (
WORD[example_roots.c:45:19] data = double
WORD[example_roots.c:45:26] data = a
CHAR[example_roots.c:45:27] data = ,
WORD[example_roots.c:45:29] data = double
WORD[example_roots.c:45:36] data = b
CHAR[example_roots.c:45:37] data = ,
WORD[example_roots.c:45:39] data = double
WORD[example_roots.c:45:46] data = d
CHAR[example_roots.c:45:47] data = ,
WORD[example_roots.c:45:49] data = Root
CHAR[example_roots.c:45:53] data = *
WORD[example_roots.c:45:55] data = root
CHAR[example_roots.c:45:59] data = )
CHAR[example_roots.c:45:61] data = {
WORD[example_roots.c:46:3] data = Root
CHAR[example_roots.c:46:7] data = <
WORD[example_roots.c:46:8] data = TwoRoots
CHAR[example_roots.c:46:16] data = >
WORD[example_roots.c:46:18] data = res
CHAR[example_roots.c:46:21] data = ;
WORD[example_roots.c:47:3] data = res
CHAR[example_roots.c:47:6] data = !
WORD[example_roots.c:47:7] data = x1
CHAR[example_roots.c:47:10] data = =
CHAR[example_roots.c:47:12] data = (
CHAR[example_roots.c:47:13] data = -
WORD[example_roots.c:47:14] data = b
CHAR[example_roots.c:47:16] data = -
WORD[example_roots.c:47:18] data = d
CHAR[example_roots.c:47:19] data = )
CHAR[example_roots.c:47:21] data = /
CHAR[example_roots.c:47:23] data = (
NUMBER[example_roots.c:47:24] data = 2
CHAR[example_roots.c:47:26] data = *
WORD[example_roots.c:47:28] data = a
CHAR[example_roots.c:47:29] data = )
CHAR[example_roots.c:47:30] data = ;
WORD[example_roots.c:48:3] data = res
CHAR[example_roots.c:48:6] data = !
WORD[example_roots.c:48:7] data = x2
CHAR[example_roots.c:48:10] data = =
CHAR[example_roots.c:48:12] data = (
CHAR[example_roots.c:48:13] data = -
WORD[example_roots.c:48:14] data = b
CHAR[example_roots.c:48:16] data = +
WORD[example_roots.c:48:18] data = d
CHAR[example_roots.c:48:19] data = )
CHAR[example_roots.c:48:21] data = /
CHAR[example_roots.c:48:23] data = (
NUMBER[example_roots.c:48:24] data = 2
CHAR[example_roots.c:48:26] data = *
WORD[example_roots.c:48:28] data = a
CHAR[example_roots.c:48:29] data = )
CHAR[example_roots.c:48:30] data = ;
WORD[example_roots.c:49:3] data = Root
CHAR[example_roots.c:49:7] data = *
WORD[example_roots.c:49:9] data = resptr
CHAR[example_roots.c:49:16] data = =
CHAR[example_roots.c:49:18] data = &
WORD[example_roots.c:49:19] data = res
CHAR[example_roots.c:49:22] data = ;
CHAR[example_roots.c:50:3] data = *
WORD[example_roots.c:50:4] data = root
CHAR[example_roots.c:50:9] data = =
CHAR[example_roots.c:50:11] data = *
WORD[example_roots.c:50:12] data = resptr
CHAR[example_roots.c:50:18] data = ;
CHAR[example_roots.c:51:1] data = }
WORD[example_roots.c:53:1] data = void
WORD[example_roots.c:53:6] data = EvalNoRoot
CHAR[example_roots.c:53:16] data = (
WORD[example_roots.c:53:17] data = Root
CHAR[example_roots.c:53:21] data = *
WORD[example_roots.c:53:23] data = root
CHAR[example_roots.c:53:27] data = )
CHAR[example_roots.c:53:29] data = {
WORD[example_roots.c:54:3] data = Root
CHAR[example_roots.c:54:7] data = <
WORD[example_roots.c:54:8] data = NoRoot
CHAR[example_roots.c:54:14] data = >
WORD[example_roots.c:54:16] data = res
CHAR[example_roots.c:54:19] data = ;
WORD[example_roots.c:55:3] data = res
CHAR[example_roots.c:55:6] data = !
WORD[example_roots.c:55:7] data = msg
CHAR[example_roots.c:55:11] data = =
LONGSTRING[example_roots.c:55:13] data = No roots found!
CHAR[example_roots.c:55:30] data = ;
WORD[example_roots.c:56:3] data = Root
CHAR[example_roots.c:56:7] data = *
WORD[example_roots.c:56:9] data = resptr
CHAR[example_roots.c:56:16] data = =
CHAR[example_roots.c:56:18] data = &
WORD[example_roots.c:56:19] data = res
CHAR[example_roots.c:56:22] data = ;
CHAR[example_roots.c:57:3] data = *
WORD[example_roots.c:57:4] data = root
CHAR[example_roots.c:57:9] data = =
CHAR[example_roots.c:57:11] data = *
WORD[example_roots.c:57:12] data = resptr
CHAR[example_roots.c:57:18] data = ;
CHAR[example_roots.c:58:1] data = }
WORD[example_roots.c:60:1] data = void
WORD[example_roots.c:60:6] data = SolveQuadratic
CHAR[example_roots.c:60:20] data = (
WORD[example_roots.c:60:21] data = double
WORD[example_roots.c:60:28] data = a
CHAR[example_roots.c:60:29] data = ,
WORD[example_roots.c:60:31] data = double
WORD[example_roots.c:60:38] data = b
CHAR[example_roots.c:60:39] data = ,
WORD[example_roots.c:60:41] data = double
WORD[example_roots.c:60:48] data = c
CHAR[example_roots.c:60:49] data = ,
WORD[example_roots.c:60:51] data = Root
CHAR[example_roots.c:60:55] data = *
WORD[example_roots.c:60:57] data = root
CHAR[example_roots.c:60:61] data = )
CHAR[example_roots.c:60:63] data = {
WORD[example_roots.c:61:3] data = double
WORD[example_roots.c:61:10] data = d
CHAR[example_roots.c:61:12] data = =
WORD[example_roots.c:61:14] data = b
CHAR[example_roots.c:61:15] data = *
WORD[example_roots.c:61:16] data = b
CHAR[example_roots.c:61:18] data = -
NUMBER[example_roots.c:61:20] data = 4
CHAR[example_roots.c:61:21] data = *
WORD[example_roots.c:61:22] data = a
CHAR[example_roots.c:61:23] data = *
WORD[example_roots.c:61:24] data = c
CHAR[example_roots.c:61:25] data = ;
WORD[example_roots.c:62:3] data = if
CHAR[example_roots.c:62:5] data = (
WORD[example_roots.c:62:6] data = d
CHAR[example_roots.c:62:8] data = =
CHAR[example_roots.c:62:9] data = =
NUMBER[example_roots.c:62:11] data = 0
CHAR[example_roots.c:62:12] data = )
CHAR[example_roots.c:62:14] data = {
WORD[example_roots.c:63:5] data = EvalOneRoot
CHAR[example_roots.c:63:16] data = (
WORD[example_roots.c:63:17] data = a
CHAR[example_roots.c:63:18] data = ,
WORD[example_roots.c:63:20] data = b
CHAR[example_roots.c:63:21] data = ,
WORD[example_roots.c:63:23] data = root
CHAR[example_roots.c:63:27] data = )
CHAR[example_roots.c:63:28] data = ;
CHAR[example_roots.c:64:3] data = }
WORD[example_roots.c:64:5] data = else
WORD[example_roots.c:64:10] data = if
CHAR[example_roots.c:64:12] data = (
WORD[example_roots.c:64:13] data = d
CHAR[example_roots.c:64:15] data = >
NUMBER[example_roots.c:64:17] data = 0
CHAR[example_roots.c:64:18] data = )
CHAR[example_roots.c:64:20] data = {
WORD[example_roots.c:65:5] data = EvalTwoRoots
CHAR[example_roots.c:65:17] data = (
WORD[example_roots.c:65:18] data = a
CHAR[example_roots.c:65:19] data = ,
WORD[example_roots.c:65:21] data = b
CHAR[example_roots.c:65:22] data = ,
WORD[example_roots.c:65:24] data = d
CHAR[example_roots.c:65:25] data = ,
WORD[example_roots.c:65:27] data = root
CHAR[example_roots.c:65:31] data = )
CHAR[example_roots.c:65:32] data = ;
CHAR[example_roots.c:66:3] data = }
WORD[example_roots.c:66:5] data = else
CHAR[example_roots.c:66:10] data = {
WORD[example_roots.c:67:5] data = EvalNoRoot
CHAR[example_roots.c:67:15] data = (
WORD[example_roots.c:67:16] data = root
CHAR[example_roots.c:67:20] data = )
CHAR[example_roots.c:67:21] data = ;
CHAR[example_roots.c:68:3] data = }
CHAR[example_roots.c:69:1] data = }
WORD[example_roots.c:71:1] data = int
WORD[example_roots.c:71:5] data = main
CHAR[example_roots.c:71:9] data = (
CHAR[example_roots.c:71:10] data = )
CHAR[example_roots.c:71:12] data = {
WORD[example_roots.c:72:3] data = double
WORD[example_roots.c:72:10] data = a
CHAR[example_roots.c:72:11] data = ,
WORD[example_roots.c:72:12] data = b
CHAR[example_roots.c:72:13] data = ,
WORD[example_roots.c:72:14] data = c
CHAR[example_roots.c:72:15] data = ;
WORD[example_roots.c:73:3] data = Root
WORD[example_roots.c:73:8] data = root
CHAR[example_roots.c:73:12] data = ;
WORD[example_roots.c:74:3] data = printf
CHAR[example_roots.c:74:9] data = (
LONGSTRING[example_roots.c:74:10] data = Input a, b, and c:

CHAR[example_roots.c:74:32] data = )
CHAR[example_roots.c:74:33] data = ;
WORD[example_roots.c:75:3] data = scanf
CHAR[example_roots.c:75:8] data = (
LONGSTRING[example_roots.c:75:9] data = %lf%lf%lf
CHAR[example_roots.c:75:20] data = ,
CHAR[example_roots.c:75:22] data = &
WORD[example_roots.c:75:23] data = a
CHAR[example_roots.c:75:24] data = ,
CHAR[example_roots.c:75:26] data = &
WORD[example_roots.c:75:27] data = b
CHAR[example_roots.c:75:28] data = ,
CHAR[example_roots.c:75:30] data = &
WORD[example_roots.c:75:31] data = c
CHAR[example_roots.c:75:32] data = )
CHAR[example_roots.c:75:33] data = ;
WORD[example_roots.c:76:3] data = SolveQuadratic
CHAR[example_roots.c:76:17] data = (
WORD[example_roots.c:76:18] data = a
CHAR[example_roots.c:76:19] data = ,
WORD[example_roots.c:76:21] data = b
CHAR[example_roots.c:76:22] data = ,
WORD[example_roots.c:76:24] data = c
CHAR[example_roots.c:76:25] data = ,
CHAR[example_roots.c:76:27] data = &
WORD[example_roots.c:76:28] data = root
CHAR[example_roots.c:76:32] data = )
CHAR[example_roots.c:76:33] data = ;
WORD[example_roots.c:77:3] data = Print
CHAR[example_roots.c:77:8] data = <
CHAR[example_roots.c:77:9] data = &
WORD[example_roots.c:77:10] data = root
CHAR[example_roots.c:77:14] data = >
CHAR[example_roots.c:77:15] data = (
CHAR[example_roots.c:77:16] data = )
CHAR[example_roots.c:77:17] data = ;
WORD[example_roots.c:78:3] data = return
NUMBER[example_roots.c:78:10] data = 0
CHAR[example_roots.c:78:11] data = ;
CHAR[example_roots.c:79:1] data = }
